
DROP KEYSPACE IF EXISTS programs;
CREATE KEYSPACE IF NOT EXISTS programs
WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : 1};

CREATE TABLE IF NOT EXISTS programs.program_revisions_by_program_id (
    programId text,
    startDateTime bigint,
    endDateTime bigint,
    revisionId text,
    name text,
    levels text,
    lastModified bigint,
    PRIMARY KEY((programId), startDateTime, endDateTime, revisionId)
);

DROP KEYSPACE IF EXISTS accounts;
CREATE KEYSPACE IF NOT EXISTS accounts
WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : 1};

CREATE TABLE IF NOT EXISTS accounts.account_by_account_id (
    accountId text,
    programId text,
    userId text,
    userType text,
    PRIMARY KEY(accountId)
);

DROP KEYSPACE IF EXISTS users;
CREATE KEYSPACE IF NOT EXISTS users
WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : 1};

CREATE TABLE IF NOT EXISTS users.user_by_email (
    email text,
    userId text,
    PRIMARY KEY(email)
);

CREATE TABLE IF NOT EXISTS users.user_by_user_id (
    userId text,
    walletId text,
    userType text,
    createdDateTime bigint,
    PRIMARY KEY(userId)
);

DROP KEYSPACE IF EXISTS wallets;
CREATE KEYSPACE IF NOT EXISTS wallets
WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : 1};

CREATE TABLE IF NOT EXISTS wallets.wallet_by_user_id (
    userId text,
    programId text,
    walletId text,
    currentLevel int,
    currentTanks text,
    lifetimeTanks text,
    PRIMARY KEY((userId), programId)
);

DROP KEYSPACE IF EXISTS transactions;
CREATE KEYSPACE IF NOT EXISTS transactions
WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : 1};

CREATE TABLE IF NOT EXISTS transactions.transaction_by_transaction_id (
    transactionId text,
    userId text,
    timestamp bigint,
    transaction text,
    PRIMARY KEY ((transactionId), timestamp)
) WITH CLUSTERING ORDER BY (timestamp DESC);

CREATE TABLE IF NOT EXISTS transactions.transaction_by_user_id (
    userId text,
    transactionId text,
    timestamp bigint,
    transaction text,
    PRIMARY KEY ((userId), timestamp)
) WITH CLUSTERING ORDER BY (timestamp DESC);


what does a void actually do...
it canals out a previous thing that happened

//do i remove the points....

amount of points to remove
from which tank it should be removed from (the same tank from which they were added ... so do the samething just minus the reuslt)
the original transaction id
timestamp


//how do i answer the question how many points does this user id and program id currently have...

//how many for a lifetime


