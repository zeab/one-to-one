
DROP KEYSPACE IF EXISTS programs;
CREATE KEYSPACE IF NOT EXISTS programs
WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : 1};

CREATE TABLE IF NOT EXISTS programs.program_revisions_by_program_id (
    programId text,
    startDateTime bigint,
    endDateTime bigint,
    revisionId text,
    name text,
    levels text,
    lastModified bigint,
    PRIMARY KEY((programId), startDateTime, endDateTime, revisionId)
);

DROP KEYSPACE IF EXISTS accounts;
CREATE KEYSPACE IF NOT EXISTS accounts
WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : 1};

CREATE TABLE IF NOT EXISTS accounts.account_by_account_id (
    accountId text,
    programId text,
    userId text,
    userType text,
    PRIMARY KEY(accountId)
);

DROP KEYSPACE IF EXISTS users;
CREATE KEYSPACE IF NOT EXISTS users
WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : 1};

CREATE TABLE IF NOT EXISTS users.user_count_by_program_id (
    programId text,
    userCount counter,
    PRIMARY KEY(programId)
);

CREATE TABLE IF NOT EXISTS users.user_by_email (
    email text,
    userId text,
    PRIMARY KEY(email)
);

CREATE TABLE IF NOT EXISTS users.user_by_user_id (
    userId text,
    walletId text,
    userType text,
    createdDateTime bigint,
    PRIMARY KEY(userId)
);

DROP KEYSPACE IF EXISTS wallets;
CREATE KEYSPACE IF NOT EXISTS wallets
WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : 1};

CREATE TABLE IF NOT EXISTS wallets.wallet_by_user_id (
    userId text,
    programId text,
    walletId text,
    currentLevel int,
    currentTanks text,
    lifetimeTanks text,
    PRIMARY KEY((userId), programId)
);

DROP KEYSPACE IF EXISTS transactions;
CREATE KEYSPACE IF NOT EXISTS transactions
WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : 1};

CREATE TABLE IF NOT EXISTS transactions.transaction_by_transaction_id (
    transactionId text,
    userId text,
    timestamp bigint,
    transaction text,
    PRIMARY KEY ((transactionId), timestamp)
) WITH CLUSTERING ORDER BY (timestamp DESC);

CREATE TABLE IF NOT EXISTS transactions.transaction_by_user_id (
    userId text,
    transactionId text,
    timestamp bigint,
    transaction text,
    PRIMARY KEY ((userId), timestamp)
) WITH CLUSTERING ORDER BY (timestamp DESC);


what does a void actually do...
it canals out a previous thing that happened

//do i remove the points....

amount of points to remove
from which tank it should be removed from (the same tank from which they were added ... so do the samething just minus the reuslt)
the original transaction id
timestamp


//how do i answer the question how many points does this user id and program id currently have...

//how many for a lifetime


DROP KEYSPACE IF EXISTS coupons;
CREATE KEYSPACE IF NOT EXISTS coupons
WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : 1};

CREATE TABLE IF NOT EXISTS coupons.coupons_by_user_id (
    userId text,
    coupons text,
    PRIMARY KEY(userId)
);

coupon
    50% off item (one time use)

promotion
    50% off item (between start and end timestamp)

how do i know the difference between them? how do i check to see if i use them

coupons are kinda like items... and promos are items applied after the receipt is checked for validity

how do i make coupons and items the same...? or maybe they are just discounts

Discount(
    discountId: String,
    name: String,
    includingItems: List[String],
    excludingItems: List[String],
    priceModifier: String,
    expirationPeriod: String
)

qty of items ... that are both required and that are applied too...

Discount("aaa", "free item", List("anyitemsku"), List.empty, 1?or0?, 6M)
Discount("bbb", "50% item", List("anyitemsku"), List.empty, 0.5, 0)
how would a bogo actually work
buy something get something...

userId couponId instanceId expirationTimestamp

read all the expiring coupons and shell them off as messages to kafka

when using the coupon tell the expiring list to forget that coupon

but then i need to undo the undo really....


the transaction



so how does a user know that it has access to either one of those discounts...

coupons
    free item
    birthday
    loyal member

promotion
    Nx points per item
    Nx points per cart
    Nx points per tier
    buy one get one
    % off item(s)
    % off cart


Coupon(
    couponId: String,
    name: String,
    desc: String,
    expirationTimestamp: Long
)

what is the difference between a coupon and a promotion ....
a coupon is a one time event
a promotion can go on for a delta

are these business rules....?
    create coupons
    create promotions
    create programs...? since really those are the most advanced business rules...

something about a user's history... all events ... 



how do i know what kinda of effects a coupon can have....





void and returns are different

how do i void a transaction
it a reverse the same thing as a void...?
how do i do expiring points... something from the program of course but... what does that actually mean...

have a job that runs every day against a predetermined table to find the users who have points that expire that day
maybe tombstone those rows after they are removed and keep the table in revere order?
don't keep them on the table at all if they never expire


also how do i do a full on transaction rather than the smaller transaction snippets...



how to do the point expiration ....

i get points yesterday and points today
how do i know that i should remove those points from yesterday because they are unused ...
and then do partial expiration... since i only used most of my points

walletId and points and the amount of points to expire

if i uses my points for something i need to remove the points from expiring

how do i actually use my points...
like... how do i say lets remove the points because of this reason...

points buys a coupon really
so then its really back to how do i do coupons because i can always "buy" a new coupon with the points i have

basically just skip the checking of the coupon once i buy it and skip the assigning it ... just assume i have it already and use it as if id done all those other things already













