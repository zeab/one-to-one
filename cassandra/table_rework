

{

}




i have a user id
I have N account id's
account id's can be part of the same program id



so i have all the programs
so i have an account number
use account number to get programId currentTier currentPoints lifetimePoints


a program has
    N tiers
        a tier has
            1 name
            1 id
            N profiles
                 a profile has
                    1 name
                    1 id
                    N rules

a user has
    N accounts
        an account has
            1 program id
            1 name

    N contact info
        1 active

userId and account number


DROP KEYSPACE IF EXISTS users;
CREATE KEYSPACE IF NOT EXISTS users
WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : 1};

CREATE TABLE IF NOT EXISTS users.current_account_snapshot_by_user_id_and_account_id (
    userId text,
    accountId text,
    pointBucketId text,
    PRIMARY KEY(programId, name)
);



DROP KEYSPACE IF EXISTS programs;
CREATE KEYSPACE IF NOT EXISTS programs
WITH REPLICATION = {'class' : 'SimpleStrategy','replication_factor' : 1};

CREATE TABLE IF NOT EXISTS programs.ledger (
    programId text,
    name text,
    PRIMARY KEY(programId, name)
);

CREATE TABLE IF NOT EXISTS programs.programs (
    programId text,
    startDateTime text,
    endDateTime text,
    name text,
    tiers text,
    PRIMARY KEY(programId)
);


//query into to see if we already have a program that




current active program...? is that maybe something i should do...?

get all programs... where start date is


so when i go back to query though i would need too know...

so what if i just did a select * from programs.programs which would give me everything...
what if they just keep making new programs and over and over and over... why would i need to know about a program that happened 2 years ago...

its got to be able to set and forget and it turns on and off automatically
there also cant be duplications of active dates... since how would i determine the actual active one...
or the one that actually applies to

